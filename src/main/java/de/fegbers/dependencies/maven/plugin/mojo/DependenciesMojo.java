package de.fegbers.dependencies.maven.plugin.mojo;

import java.io.File;
import java.io.FileOutputStream;
import java.util.List;
import java.util.Properties;

import org.apache.maven.model.Dependency;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;

import com.google.common.io.Files;

@Mojo(name = "save", defaultPhase = LifecyclePhase.INITIALIZE)
public class DependenciesMojo extends AbstractMojo
{
	private static final String PROPERTY_PREFIX = "dependency_";

	@Parameter(defaultValue = "${project}", readonly = true, required = true)
	private MavenProject project;

	@Parameter(defaultValue = "${project.build.outputDirectory}/dependencies.properties", readonly = true)
	private String dependenciesPropertiesOutputFilePath;

	public void execute() throws MojoExecutionException, MojoFailureException
	{
		Properties versionProperties = createVersionProperties(project.getDependencies());

		File propertiesFile = new File(dependenciesPropertiesOutputFilePath);

		if (propertiesFile.exists())
		{
			getLog().debug(propertiesFile.getAbsolutePath() + " already exists.. Deleting old version.");
			propertiesFile.delete();
		}

		try
		{
			Files.createParentDirs(propertiesFile);
			FileOutputStream outputStream = new FileOutputStream(propertiesFile);
			versionProperties.store(outputStream, "Generated by dependency-maven-plugin");
			outputStream.close();
		}
		catch (Exception e)
		{
			throw new MojoExecutionException("Failed to execute dependency-maven-plugin", e);
		}
	}

	private static Properties createVersionProperties(List<Dependency> dependencies)
	{
		Properties properties = new Properties();
		for (Dependency dependency : dependencies)
		{
			properties.put(createPropertiesKey(dependency), dependency.getVersion());
		}
		return properties;
	}

	private static String createPropertiesKey(Dependency dependency)
	{
		return PROPERTY_PREFIX + dependency.getManagementKey().replaceAll(":", "_").replaceAll("\\.", "_");
	}
}
